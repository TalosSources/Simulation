au plus tôt : 
	-pour le grabber :
		-comprendre la raison de la violence des collisions
	(-refix le script avec les débris)

pourquoi pas modéliser une planète avec un intérieur
jeter un coup d'oeil à soleilTourne.cs (FAIRE UN SOLEIL)
faire des nuages : 
	-ils sont brumeux, avec un collider au milieux qui est caché dans la brume
	-ils flottillent verticalement et glissent horizontalement
	-lorsqu'on saute dessus, ils accusent le coup en descendant légèrement puis remontent.
faire une trottinnette volante magique (avec des arcs-en-ciel derrière)
faire une chambre d'antigravité
faire un lecteur musical avec une selection swag
faire un lecteur vidéo peut-être
faire une interface du futur à la Iron-Man (à très long terme si ce projet continue d'être cool)
en apprendre assez sur les raycast pour stick le perso au sol
comprendre pourquoi on a toujours du stutter sur les planètes parfois
mettre une animation de super-nova avec la musique éponyme (faire un joli soleil ducoup)
ne pas hésiter à faire une ISS (avec ducoup des contrôles basés sur les forces)
cubegun : un gun qui tire des cubes, avec deux slider diégétiques pour la taille et la vitesse de lancement
Créer un scénario d'éclipse avec la musique du même nom 
trouver pourquoi les objets tirés ne spwanent pas directement à l'endroit voulu

git commit -a -m "this command will commit all the already VC tracked file who changed"


En général : ne pas hésiter à refaire certains components de unity lorsqu'ils ne correspondent pas à ce dont
j'ai besoin ou que j'arrive pas à les faire marcher (grab et gravity)

u = G * M
v0 = sqrt(u / r)
v0 = sqrt(G*M / r)
G = 10, M = 50'000, r = 8 * r0 = 800
=> v0 = sqrt(500'000 / 800) = 25
pour maximiser v0 : maximiser G et M, minimiser r
G = 100, M = 500'000, r = 200 = 2 * 100 => v0 = sqrt(50'000'000 / 200) = 500
fixés : r = 800, v0 = 40, G et M libres. Si G = le vrai G, G = 6.67 * 10^-11
=> (v0^2 * r) / G = M = 1600 * 800 / G = 1.92E16
mais masses limitées : si G = 6.67e-1 => M = 1919040.48

G = 6.67e-11, r = 200, M = 1e+09, v0 = 0.018
G = 6.67e-11, r = 800, M = 1e+09, v0 = 0.018

gSurface = G * m1 / radius^2 => m1 = radius^2 * gsurface / G;

